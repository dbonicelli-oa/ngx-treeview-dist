{"version":3,"file":"ngx-treeview.js","sources":["../../../projects/ngx-treeview/src/lib/directives/dropdown.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-menu.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-toggle.directive.ts","../../../projects/ngx-treeview/src/lib/models/treeview-i18n.ts","../../../projects/ngx-treeview/src/lib/models/treeview-config.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-helper.ts","../../../projects/ngx-treeview/src/lib/models/treeview-item.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-event-parser.ts","../../../projects/ngx-treeview/src/lib/components/treeview/treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/dropdown-treeview/dropdown-treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/treeview-item/treeview-item.component.ts","../../../projects/ngx-treeview/src/lib/pipes/treeview.pipe.ts","../../../projects/ngx-treeview/src/lib/treeview.module.ts","../../../projects/ngx-treeview/src/public-api.ts","../../../projects/ngx-treeview/src/ngx-treeview.ts"],"sourcesContent":["import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';\nimport { isNil } from 'lodash';\n\n@Directive({\n  selector: '[ngxDropdown]',\n  exportAs: 'ngxDropdown'\n})\nexport class DropdownDirective {\n  toggleElement: any;\n  @Input('open') internalOpen = false;\n  @Output() openChange = new EventEmitter<boolean>();\n\n  @HostBinding('class.show') get isOpen(): boolean {\n    return this.internalOpen;\n  }\n\n  @HostListener('keyup.esc')\n  onKeyupEsc(): void {\n    this.close();\n  }\n\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent): void {\n    if (event.button !== 2 && !this.isEventFromToggle(event)) {\n      this.close();\n    }\n  }\n\n  open(): void {\n    if (!this.internalOpen) {\n      this.internalOpen = true;\n      this.openChange.emit(true);\n    }\n  }\n\n  close(): void {\n    if (this.internalOpen) {\n      this.internalOpen = false;\n      this.openChange.emit(false);\n    }\n  }\n\n  toggle(): void {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  private isEventFromToggle(event: MouseEvent): boolean {\n    return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n  }\n}\n","import { Directive, HostBinding } from '@angular/core';\nimport { DropdownDirective } from './dropdown.directive';\n\n@Directive({\n  selector: '[ngxDropdownMenu]',\n  host: {\n    '[class.dropdown-menu]': 'true',\n    '[class.show]': 'dropdown.isOpen'\n  }\n})\nexport class DropdownMenuDirective {\n  constructor(\n    public dropdown: DropdownDirective\n  ) { }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport { DropdownDirective } from './dropdown.directive';\n\n@Directive({\n  selector: '[ngxDropdownToggle]',\n  host: {\n    class: 'dropdown-toggle',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'dropdown.isOpen',\n    '(click)': 'dropdown.toggle()'\n  }\n})\nexport class DropdownToggleDirective {\n  constructor(\n    public dropdown: DropdownDirective,\n    elementRef: ElementRef\n  ) {\n    dropdown.toggleElement = elementRef.nativeElement;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TreeviewSelection } from './treeview-item';\n\n@Injectable()\nexport abstract class TreeviewI18n {\n  abstract getText(selection: TreeviewSelection): string;\n  abstract getAllCheckboxText(): string;\n  abstract getFilterPlaceholder(): string;\n  abstract getFilterNoItemsFoundText(): string;\n  abstract getTooltipCollapseExpandText(isCollapse: boolean): string;\n}\n\n@Injectable()\nexport class DefaultTreeviewI18n extends TreeviewI18n {\n  getText(selection: TreeviewSelection): string {\n    if (selection.uncheckedItems.length === 0) {\n      if (selection.checkedItems.length > 0) {\n        return this.getAllCheckboxText();\n      } else {\n        return '';\n      }\n    }\n\n    switch (selection.checkedItems.length) {\n      case 0:\n        return 'Select options';\n      case 1:\n        return selection.checkedItems[0].text;\n      default:\n        return `${selection.checkedItems.length} options selected`;\n    }\n  }\n\n  getAllCheckboxText(): string {\n    return 'All';\n  }\n\n  getFilterPlaceholder(): string {\n    return 'Filter';\n  }\n\n  getFilterNoItemsFoundText(): string {\n    return 'No items found';\n  }\n\n  getTooltipCollapseExpandText(isCollapse: boolean): string {\n    return isCollapse ? 'Expand' : 'Collapse';\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TreeviewConfig {\n  hasAllCheckBox = true;\n  hasFilter = false;\n  hasCollapseExpand = false;\n  decoupleChildFromParent = false;\n  maxHeight = 500;\n\n  get hasDivider(): boolean {\n    return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\n  }\n\n  public static create(fields?: {\n    hasAllCheckBox?: boolean,\n    hasFilter?: boolean,\n    hasCollapseExpand?: boolean,\n    decoupleChildFromParent?: boolean\n    maxHeight?: number,\n  }): TreeviewConfig {\n    const config = new TreeviewConfig();\n    Object.assign(config, fields);\n    return config;\n  }\n}\n","import { concat, isNil, pull } from 'lodash';\nimport { TreeviewItem } from '../models/treeview-item';\n\nexport const TreeviewHelper = {\n  findItem,\n  findItemInList,\n  findParent,\n  removeItem,\n  concatSelection\n};\n\nfunction findItem(root: TreeviewItem, value: any): TreeviewItem {\n  if (isNil(root)) {\n    return undefined;\n  }\n\n  if (root.value === value) {\n    return root;\n  }\n\n  if (root.children) {\n    for (const child of root.children) {\n      const foundItem = findItem(child, value);\n      if (foundItem) {\n        return foundItem;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction findItemInList(list: TreeviewItem[], value: any): TreeviewItem {\n  if (isNil(list)) {\n    return undefined;\n  }\n\n  for (const item of list) {\n    const foundItem = findItem(item, value);\n    if (foundItem) {\n      return foundItem;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findParent(root: TreeviewItem, item: TreeviewItem): TreeviewItem {\n  if (isNil(root) || isNil(root.children)) {\n    return undefined;\n  }\n\n  for (const child of root.children) {\n    if (child === item) {\n      return root;\n    } else {\n      const parent = findParent(child, item);\n      if (parent) {\n        return parent;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction removeItem(root: TreeviewItem, item: TreeviewItem): boolean {\n  const parent = findParent(root, item);\n  if (parent) {\n    pull(parent.children, item);\n    if (parent.children.length === 0) {\n      parent.children = undefined;\n    } else {\n      parent.correctChecked();\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction concatSelection(items: TreeviewItem[], checked: TreeviewItem[], unchecked: TreeviewItem[]): { [k: string]: TreeviewItem[] } {\n  let checkedItems = [...checked];\n  let uncheckedItems = [...unchecked];\n  for (const item of items) {\n    const selection = item.getSelection();\n    checkedItems = concat(checkedItems, selection.checkedItems);\n    uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\n  }\n  return {\n    checked: checkedItems,\n    unchecked: uncheckedItems\n  };\n}\n","import { isBoolean, isNil, isString } from 'lodash';\nimport { TreeviewHelper } from '../helpers/treeview-helper';\n\nexport interface TreeviewSelection {\n  checkedItems: TreeviewItem[];\n  uncheckedItems: TreeviewItem[];\n}\n\nexport interface TreeItem {\n  text: string;\n  value: any;\n  disabled?: boolean;\n  checked?: boolean;\n  collapsed?: boolean;\n  children?: TreeItem[];\n}\n\nexport class TreeviewItem {\n  private internalDisabled = false;\n  private internalChecked = true;\n  private internalCollapsed = false;\n  private internalChildren: TreeviewItem[];\n  text: string;\n  value: any;\n\n  constructor(item: TreeItem, autoCorrectChecked = false) {\n    if (isNil(item)) {\n      throw new Error('Item must be defined');\n    }\n    if (isString(item.text)) {\n      this.text = item.text;\n    } else {\n      throw new Error('A text of item must be string object');\n    }\n    this.value = item.value;\n    if (isBoolean(item.checked)) {\n      this.checked = item.checked;\n    }\n    if (isBoolean(item.collapsed)) {\n      this.collapsed = item.collapsed;\n    }\n    if (isBoolean(item.disabled)) {\n      this.disabled = item.disabled;\n    }\n    if (!isNil(item.children) && item.children.length > 0) {\n      this.children = item.children.map(child => {\n        if (this.disabled === true) {\n          child.disabled = true;\n        }\n\n        return new TreeviewItem(child);\n      });\n    }\n\n    if (autoCorrectChecked) {\n      this.correctChecked();\n    }\n  }\n\n  get checked(): boolean {\n    return this.internalChecked;\n  }\n\n  set checked(value: boolean) {\n    if (!this.internalDisabled) {\n      if (this.internalChecked !== value) {\n        this.internalChecked = value;\n      }\n    }\n  }\n\n  get indeterminate(): boolean {\n    return this.checked === undefined;\n  }\n\n  setCheckedRecursive(value: boolean): void {\n    if (!this.internalDisabled) {\n      this.internalChecked = value;\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(child => child.setCheckedRecursive(value));\n      }\n    }\n  }\n\n  get disabled(): boolean {\n    return this.internalDisabled;\n  }\n\n  set disabled(value: boolean) {\n    if (this.internalDisabled !== value) {\n      this.internalDisabled = value;\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(child => child.disabled = value);\n      }\n    }\n  }\n\n  get collapsed(): boolean {\n    return this.internalCollapsed;\n  }\n\n  set collapsed(value: boolean) {\n    if (this.internalCollapsed !== value) {\n      this.internalCollapsed = value;\n    }\n  }\n\n  setCollapsedRecursive(value: boolean): void {\n    this.internalCollapsed = value;\n    if (!isNil(this.internalChildren)) {\n      this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\n    }\n  }\n\n  get children(): TreeviewItem[] {\n    return this.internalChildren;\n  }\n\n  set children(value: TreeviewItem[]) {\n    if (this.internalChildren !== value) {\n      if (!isNil(value) && value.length === 0) {\n        throw new Error('Children must be not an empty array');\n      }\n      this.internalChildren = value;\n      if (!isNil(this.internalChildren)) {\n        let checked = null;\n        this.internalChildren.forEach(child => {\n          if (checked === null) {\n            checked = child.checked;\n          } else {\n            if (child.checked !== checked) {\n              checked = undefined;\n              return;\n            }\n          }\n        });\n        this.internalChecked = checked;\n      }\n    }\n  }\n\n  getSelection(): TreeviewSelection {\n    let checkedItems: TreeviewItem[] = [];\n    let uncheckedItems: TreeviewItem[] = [];\n    if (isNil(this.internalChildren)) {\n      if (this.internalChecked) {\n        checkedItems.push(this);\n      } else {\n        uncheckedItems.push(this);\n      }\n    } else {\n      const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\n      checkedItems = selection.checked;\n      uncheckedItems = selection.unchecked;\n    }\n\n    return {\n      checkedItems,\n      uncheckedItems\n    };\n  }\n\n  correctChecked(): void {\n    this.internalChecked = this.getCorrectChecked();\n  }\n\n  private getCorrectChecked(): boolean {\n    let checked: boolean = null;\n    if (!isNil(this.internalChildren)) {\n      for (const child of this.internalChildren) {\n        child.internalChecked = child.getCorrectChecked();\n        if (checked === null) {\n          checked = child.internalChecked;\n        } else if (checked !== child.internalChecked) {\n          checked = undefined;\n          break;\n        }\n      }\n    } else {\n      checked = this.checked;\n    }\n\n    return checked;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { isNil } from 'lodash';\nimport { TreeviewItem } from '../models/treeview-item';\nimport { TreeviewComponent } from '../components/treeview/treeview.component';\n\n@Injectable()\nexport abstract class TreeviewEventParser {\n  abstract getSelectedChange(component: TreeviewComponent): any[];\n}\n\n@Injectable()\nexport class DefaultTreeviewEventParser extends TreeviewEventParser {\n  getSelectedChange(component: TreeviewComponent): any[] {\n    const checkedItems = component.selection.checkedItems;\n    if (!isNil(checkedItems)) {\n      return checkedItems.map(item => item.value);\n    }\n\n    return [];\n  }\n}\n\nexport interface DownlineTreeviewItem {\n  item: TreeviewItem;\n  parent: DownlineTreeviewItem;\n}\n\n@Injectable()\nexport class DownlineTreeviewEventParser extends TreeviewEventParser {\n  getSelectedChange(component: TreeviewComponent): any[] {\n    const items = component.items;\n    if (!isNil(items)) {\n      let result: DownlineTreeviewItem[] = [];\n      items.forEach(item => {\n        const links = this.getLinks(item, null);\n        if (!isNil(links)) {\n          result = result.concat(links);\n        }\n      });\n\n      return result;\n    }\n\n    return [];\n  }\n\n  private getLinks(item: TreeviewItem, parent: DownlineTreeviewItem): DownlineTreeviewItem[] {\n    if (!isNil(item.children)) {\n      const link = {\n        item,\n        parent\n      };\n      let result: DownlineTreeviewItem[] = [];\n      item.children.forEach(child => {\n        const links = this.getLinks(child, link);\n        if (!isNil(links)) {\n          result = result.concat(links);\n        }\n      });\n\n      return result;\n    }\n\n    if (item.checked) {\n      return [{\n        item,\n        parent\n      }];\n    }\n\n    return null;\n  }\n}\n\n@Injectable()\nexport class OrderDownlineTreeviewEventParser extends TreeviewEventParser {\n  private currentDownlines: DownlineTreeviewItem[] = [];\n  private parser = new DownlineTreeviewEventParser();\n\n  getSelectedChange(component: TreeviewComponent): any[] {\n    const newDownlines: DownlineTreeviewItem[] = this.parser.getSelectedChange(component);\n    if (this.currentDownlines.length === 0) {\n      this.currentDownlines = newDownlines;\n    } else {\n      const intersectDownlines: DownlineTreeviewItem[] = [];\n      this.currentDownlines.forEach(downline => {\n        let foundIndex = -1;\n        const length = newDownlines.length;\n        for (let i = 0; i < length; i++) {\n          if (downline.item.value === newDownlines[i].item.value) {\n            foundIndex = i;\n            break;\n          }\n        }\n\n        if (foundIndex !== -1) {\n          intersectDownlines.push(newDownlines[foundIndex]);\n          newDownlines.splice(foundIndex, 1);\n        }\n      });\n\n      this.currentDownlines = intersectDownlines.concat(newDownlines);\n    }\n\n    return this.currentDownlines;\n  }\n}\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges, TemplateRef, OnInit } from '@angular/core';\nimport { isNil, includes } from 'lodash';\nimport { TreeviewI18n } from '../../models/treeview-i18n';\nimport { TreeviewItem, TreeviewSelection } from '../../models/treeview-item';\nimport { TreeviewConfig } from '../../models/treeview-config';\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\nimport { TreeviewHelper } from '../../helpers/treeview-helper';\nimport { TreeviewEventParser } from '../../helpers/treeview-event-parser';\n\nclass FilterTreeviewItem extends TreeviewItem {\n  private readonly refItem: TreeviewItem;\n  constructor(item: TreeviewItem) {\n    super({\n      text: item.text,\n      value: item.value,\n      disabled: item.disabled,\n      checked: item.checked,\n      collapsed: item.collapsed,\n      children: item.children\n    });\n    this.refItem = item;\n  }\n\n  updateRefChecked(): void {\n    this.children.forEach(child => {\n      if (child instanceof FilterTreeviewItem) {\n        child.updateRefChecked();\n      }\n    });\n\n    let refChecked = this.checked;\n    if (refChecked) {\n      for (const refChild of this.refItem.children) {\n        if (!refChild.checked) {\n          refChecked = false;\n          break;\n        }\n      }\n    }\n    this.refItem.checked = refChecked;\n  }\n}\n\n@Component({\n  selector: 'ngx-treeview',\n  templateUrl: './treeview.component.html',\n  styleUrls: ['./treeview.component.scss']\n})\nexport class TreeviewComponent implements OnChanges, OnInit {\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\n  @Input() items: TreeviewItem[];\n  @Input() config: TreeviewConfig;\n  @Output() selectedChange = new EventEmitter<any[]>();\n  @Output() filterChange = new EventEmitter<string>();\n  headerTemplateContext: TreeviewHeaderTemplateContext;\n  allItem: TreeviewItem;\n  filterText = '';\n  filterItems: TreeviewItem[];\n  selection: TreeviewSelection;\n\n  constructor(\n    public i18n: TreeviewI18n,\n    private defaultConfig: TreeviewConfig,\n    private eventParser: TreeviewEventParser\n  ) {\n    this.config = this.defaultConfig;\n    this.allItem = new TreeviewItem({ text: 'All', value: undefined });\n  }\n\n  get hasFilterItems(): boolean {\n    return !isNil(this.filterItems) && this.filterItems.length > 0;\n  }\n\n  get maxHeight(): string {\n    return `${this.config.maxHeight}`;\n  }\n\n  ngOnInit(): void {\n    this.createHeaderTemplateContext();\n    this.generateSelection();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const itemsSimpleChange = changes.items;\n    if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\n      this.updateFilterItems();\n      this.updateCollapsedOfAll();\n      this.raiseSelectedChange();\n    }\n  }\n\n  onAllCollapseExpand(): void {\n    this.allItem.collapsed = !this.allItem.collapsed;\n    this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\n  }\n\n  onFilterTextChange(text: string): void {\n    this.filterText = text;\n    this.filterChange.emit(text);\n    this.updateFilterItems();\n  }\n\n  onAllCheckedChange(): void {\n    const checked = this.allItem.checked;\n    this.filterItems.forEach(item => {\n      item.setCheckedRecursive(checked);\n      if (item instanceof FilterTreeviewItem) {\n        item.updateRefChecked();\n      }\n    });\n\n    this.raiseSelectedChange();\n  }\n\n  onItemCheckedChange(item: TreeviewItem, checked: boolean): void {\n    if (item instanceof FilterTreeviewItem) {\n      item.updateRefChecked();\n    }\n\n    this.updateCheckedOfAll();\n    this.raiseSelectedChange();\n  }\n\n  raiseSelectedChange(): void {\n    this.generateSelection();\n    const values = this.eventParser.getSelectedChange(this);\n    setTimeout(() => {\n      this.selectedChange.emit(values);\n    });\n  }\n\n  private createHeaderTemplateContext(): void {\n    this.headerTemplateContext = {\n      config: this.config,\n      item: this.allItem,\n      onCheckedChange: () => this.onAllCheckedChange(),\n      onCollapseExpand: () => this.onAllCollapseExpand(),\n      onFilterTextChange: (text) => this.onFilterTextChange(text)\n    };\n  }\n\n  private generateSelection(): void {\n    let checkedItems: TreeviewItem[] = [];\n    let uncheckedItems: TreeviewItem[] = [];\n    if (!isNil(this.items)) {\n      const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n      checkedItems = selection.checked;\n      uncheckedItems = selection.unchecked;\n    }\n\n    this.selection = {\n      checkedItems,\n      uncheckedItems\n    };\n  }\n\n  private updateFilterItems(): void {\n    if (this.filterText !== '') {\n      const filterItems: TreeviewItem[] = [];\n      const filterText = this.filterText.toLowerCase();\n      this.items.forEach(item => {\n        const newItem = this.filterItem(item, filterText);\n        if (!isNil(newItem)) {\n          filterItems.push(newItem);\n        }\n      });\n      this.filterItems = filterItems;\n    } else {\n      this.filterItems = this.items;\n    }\n\n    this.updateCheckedOfAll();\n  }\n\n  private filterItem(item: TreeviewItem, filterText: string): TreeviewItem {\n    const isMatch = includes(item.text.toLowerCase(), filterText);\n    if (isMatch) {\n      return item;\n    } else {\n      if (!isNil(item.children)) {\n        const children: TreeviewItem[] = [];\n        item.children.forEach(child => {\n          const newChild = this.filterItem(child, filterText);\n          if (!isNil(newChild)) {\n            children.push(newChild);\n          }\n        });\n        if (children.length > 0) {\n          const newItem = new FilterTreeviewItem(item);\n          newItem.collapsed = false;\n          newItem.children = children;\n          return newItem;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  private updateCheckedOfAll(): void {\n    let itemChecked: boolean = null;\n    for (const filterItem of this.filterItems) {\n      if (itemChecked === null) {\n        itemChecked = filterItem.checked;\n      } else if (itemChecked !== filterItem.checked) {\n        itemChecked = undefined;\n        break;\n      }\n    }\n\n    if (itemChecked === null) {\n      itemChecked = false;\n    }\n\n    this.allItem.checked = itemChecked;\n  }\n\n  private updateCollapsedOfAll(): void {\n    let hasItemExpanded = false;\n    for (const filterItem of this.filterItems) {\n      if (!filterItem.collapsed) {\n        hasItemExpanded = true;\n        break;\n      }\n    }\n\n    this.allItem.collapsed = !hasItemExpanded;\n  }\n}\n","import { Component, EventEmitter, Input, Output, ViewChild, TemplateRef } from '@angular/core';\nimport { TreeviewI18n } from '../../models/treeview-i18n';\nimport { TreeviewItem } from '../../models/treeview-item';\nimport { TreeviewConfig } from '../../models/treeview-config';\nimport { TreeviewComponent } from '../treeview/treeview.component';\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\n\n@Component({\n  selector: 'ngx-dropdown-treeview',\n  templateUrl: './dropdown-treeview.component.html',\n  styleUrls: ['./dropdown-treeview.component.scss']\n})\nexport class DropdownTreeviewComponent {\n  @Input() buttonClass = 'btn-outline-secondary';\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\n  @Input() items: TreeviewItem[];\n  @Input() config: TreeviewConfig;\n  @Output() selectedChange = new EventEmitter<any[]>(true);\n  @Output() filterChange = new EventEmitter<string>();\n  @ViewChild(TreeviewComponent, { static: false }) treeviewComponent: TreeviewComponent;\n  buttonLabel: string;\n\n  constructor(\n    public i18n: TreeviewI18n,\n    private defaultConfig: TreeviewConfig\n  ) {\n    this.config = this.defaultConfig;\n  }\n\n  onSelectedChange(values: any[]): void {\n    this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\n    this.selectedChange.emit(values);\n  }\n\n  onFilterChange(text: string): void {\n    this.filterChange.emit(text);\n  }\n}\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { isNil } from 'lodash';\nimport { TreeviewItem } from '../../models/treeview-item';\nimport { TreeviewConfig } from '../../models/treeview-config';\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\n\n@Component({\n  selector: 'ngx-treeview-item',\n  templateUrl: './treeview-item.component.html',\n  styleUrls: ['./treeview-item.component.scss']\n})\nexport class TreeviewItemComponent {\n  @Input() config: TreeviewConfig;\n  @Input() template: TemplateRef<TreeviewItemTemplateContext>;\n  @Input() item: TreeviewItem;\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  constructor(\n    private defaultConfig: TreeviewConfig\n  ) {\n    this.config = this.defaultConfig;\n  }\n\n  onCollapseExpand = () => {\n    this.item.collapsed = !this.item.collapsed;\n  }\n\n  onCheckedChange = () => {\n    const checked = this.item.checked;\n    if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\n      this.item.children.forEach(child => child.setCheckedRecursive(checked));\n    }\n    this.checkedChange.emit(checked);\n  }\n\n  onChildCheckedChange(child: TreeviewItem, checked: boolean): void {\n    if (!this.config.decoupleChildFromParent) {\n      let itemChecked: boolean = null;\n      for (const childItem of this.item.children) {\n        if (itemChecked === null) {\n          itemChecked = childItem.checked;\n        } else if (itemChecked !== childItem.checked) {\n          itemChecked = undefined;\n          break;\n        }\n      }\n\n      if (itemChecked === null) {\n        itemChecked = false;\n      }\n\n      if (this.item.checked !== itemChecked) {\n        this.item.checked = itemChecked;\n      }\n\n    }\n\n    this.checkedChange.emit(checked);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { isNil } from 'lodash';\nimport { TreeviewItem } from '../models/treeview-item';\n\n@Pipe({\n  name: 'ngxTreeview'\n})\nexport class TreeviewPipe implements PipeTransform {\n  transform(objects: any[], textField: string): TreeviewItem[] {\n    if (isNil(objects)) {\n      return undefined;\n    }\n\n    return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { DropdownDirective } from './directives/dropdown.directive';\nimport { DropdownMenuDirective } from './directives/dropdown-menu.directive';\nimport { DropdownToggleDirective } from './directives/dropdown-toggle.directive';\nimport { DropdownTreeviewComponent } from './components/dropdown-treeview/dropdown-treeview.component';\nimport { TreeviewComponent } from './components/treeview/treeview.component';\nimport { TreeviewItemComponent } from './components/treeview-item/treeview-item.component';\nimport { TreeviewPipe } from './pipes/treeview.pipe';\nimport { TreeviewI18n, DefaultTreeviewI18n } from './models/treeview-i18n';\nimport { TreeviewConfig } from './models/treeview-config';\nimport { TreeviewEventParser, DefaultTreeviewEventParser } from './helpers/treeview-event-parser';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule\n  ],\n  declarations: [\n    TreeviewComponent,\n    TreeviewItemComponent,\n    TreeviewPipe,\n    DropdownDirective,\n    DropdownMenuDirective,\n    DropdownToggleDirective,\n    DropdownTreeviewComponent\n  ], exports: [\n    TreeviewComponent,\n    TreeviewPipe,\n    DropdownTreeviewComponent\n  ]\n})\nexport class TreeviewModule {\n  static forRoot(): ModuleWithProviders<TreeviewModule> {\n    return {\n      ngModule: TreeviewModule,\n      providers: [\n        TreeviewConfig,\n        { provide: TreeviewI18n, useClass: DefaultTreeviewI18n },\n        { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-treeview\n */\n\nexport * from './lib/treeview.module';\nexport * from './lib/components/treeview/treeview.component';\nexport * from './lib/components/dropdown-treeview/dropdown-treeview.component';\nexport * from './lib/pipes/treeview.pipe';\nexport * from './lib/directives/dropdown-toggle.directive';\nexport * from './lib/directives/dropdown.directive';\nexport * from './lib/models/treeview-item';\nexport * from './lib/models/treeview-config';\nexport * from './lib/models/treeview-i18n';\nexport * from './lib/models/treeview-item-template-context';\nexport * from './lib/helpers/treeview-event-parser';\nexport * from './lib/helpers/treeview-helper';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {TreeviewItemComponent as ɵa} from './lib/components/treeview-item/treeview-item.component';\nexport {DropdownMenuDirective as ɵb} from './lib/directives/dropdown-menu.directive';"],"names":[],"mappings":"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"}